{"version":3,"file":"FirebaseApp.js","sourceRoot":"","sources":["../src/FirebaseApp.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAGhD,cAAc,kBAAkB,CAAC;AAEjC,MAAM,CAAC,MAAM,EAAE,eAAe,EAAE,GAAG,eAAe,CAAC;AAEnD,MAAM,WAAW;IAMf,YAAY,IAAY;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,WAAW;QACT,aAAa;QACb,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE;YACnC,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;SACtE;QACD,aAAa;QACb,OAAO,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAED;;;OAGG;IACH,eAAe;QACb,aAAa;QACb,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE;YACvC,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAC;SAC1E;QACD,aAAa;QACb,OAAO,eAAe,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;CACF;AAED;;;;;;;;;;GAUG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,OAAyB,EACzB,IAAa;IAEb,aAAa;IACb,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE;QACvC,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAC;KAC1E;IACD,aAAa;IACb,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACxE,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,IAAa;IAC7C,aAAa;IACb,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE;QAChC,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;KACnE;IACD,aAAa;IACb,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACxD,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY;IAChC,aAAa;IACb,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE;QACjC,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;KACpE;IACD,aAAa;IACb,MAAM,QAAQ,GAAG,MAAM,eAAe,CAAC,YAAY,EAAE,CAAC;IACtD,OAAO,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;AAC3D,CAAC","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport ExpoFirebaseApp from './ExpoFirebaseApp';\nimport { FirebaseOptions } from './FirebaseApp.types';\nexport { FirebaseOptions } from './FirebaseApp.types';\nexport * from './GoogleServices';\n\nexport const { DEFAULT_OPTIONS } = ExpoFirebaseApp;\n\nclass FirebaseApp {\n  /**\n   * The (read-only) name for this app.\n   */\n  public readonly name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Delete the Firebase app instance.\n   */\n  deleteAsync(): Promise<void> {\n    // @ts-ignore\n    if (!ExpoFirebaseApp.deleteAppAsync) {\n      throw new UnavailabilityError('expo-firebase-app', 'deleteAppAsync');\n    }\n    // @ts-ignore\n    return ExpoFirebaseApp.deleteAppAsync(this.name);\n  }\n\n  /**\n   * Returns the (read-only) configuration options for this app. These are the original parameters\n   * the app was initialized with.\n   */\n  getOptionsAsync(): Promise<FirebaseOptions> {\n    // @ts-ignore\n    if (!ExpoFirebaseApp.getAppOptionsAsync) {\n      throw new UnavailabilityError('expo-firebase-app', 'getAppOptionsAsync');\n    }\n    // @ts-ignore\n    return ExpoFirebaseApp.getAppOptionsAsync(this.name);\n  }\n}\n\n/**\n * Initializes a Firebase app.\n *\n * On iOS and Android this method is optional, as the default Firebase app instance\n * is automatically initialized when the `GoogleService-Info.plist` or `google-services.json`\n * file is configured.\n *\n * You can use this method to initialize additional Firebase app instances. You should typically not\n * initialize the default Firebase with custom options, as the default app is tightly coupled\n * with the google-services config that is shipped with the app.\n */\nexport async function initializeAppAsync(\n  options?: FirebaseOptions,\n  name?: string\n): Promise<FirebaseApp> {\n  // @ts-ignore\n  if (!ExpoFirebaseApp.initializeAppAsync) {\n    throw new UnavailabilityError('expo-firebase-app', 'initializeAppAsync');\n  }\n  // @ts-ignore\n  const appName = await ExpoFirebaseApp.initializeAppAsync(options, name);\n  return new FirebaseApp(appName);\n}\n\n/**\n * Retrieves a Firebase app instance.\n * When called with no arguments, the default app is returned. When an app name is provided, the app corresponding to that name is returned.\n * An exception is thrown if the app being retrieved has not yet been initialized.\n *\n * @param name Optional name of the app to return\n */\nexport async function getAppAsync(name?: string): Promise<FirebaseApp> {\n  // @ts-ignore\n  if (!ExpoFirebaseApp.getAppAsync) {\n    throw new UnavailabilityError('expo-firebase-app', 'getAppAsync');\n  }\n  // @ts-ignore\n  const appName = await ExpoFirebaseApp.getAppAsync(name);\n  return new FirebaseApp(appName);\n}\n\n/**\n * Retrieves all initialized Firebase app instances.\n */\nexport async function getAppsAsync(): Promise<FirebaseApp[]> {\n  // @ts-ignore\n  if (!ExpoFirebaseApp.getAppsAsync) {\n    throw new UnavailabilityError('expo-firebase-app', 'getAppsAsync');\n  }\n  // @ts-ignore\n  const appNames = await ExpoFirebaseApp.getAppsAsync();\n  return appNames.map(appName => new FirebaseApp(appName));\n}\n"]}